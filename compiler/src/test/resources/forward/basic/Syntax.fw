// SPDX-License-Identifier: MIT

// This is an introduction to Forward syntax.
// In general, Forward tries to keep things very simple and avoid extra punctuation.

// You can import other classes.
import {
    java.io.PrintStream
}

// Each file contains exactly one class definition.
// You can inherit a single class by writing " : ClassName" after definition.
class forward.basic.Syntax

// Fields can be defined as following.
f1:int

// Constructors are methods named "constructor", they are not generated by
// default. Return statement should always be explicit, otherwise an
// exception will be thrown at runtime.
constructor():void {
    return
}

// Parameters are not separated by commas.
testMethod(a:int):int {
    // Typing is static and strong. Variable declaration always requires type.
    // Supported primitive types are int, long, float and double.
    var var1:int unused:double
    var1 = a - 1

    // Booleans are represented with integers 0 and 1.
    // Lack of semicolons means that you can chain statements.
    var e:int e = (10 > 5) + (10L < 5L)

    if -4F > -8F {
        e = e + 1
    } else {
        e = e - 1
    }

    // Language supports only while loops, but it's possible to combine
    // statements to get syntax similar to for loop.
    var f:int f = 0 while f < 8 {
        f = f + 1
    }

    return var1 + 2 * (var1 - 1) + e + f
}

// Fields and methods can be static.
static f2:long
static staticTestMethod():PrintStream {
    return java.lang.System->out
}
