// SPDX-License-Identifier: MIT

import {
    java.lang.Object

    java.util.List
    java.util.Comparator

    forward.TestUtils
}

class forward.basic.Algorithms

constructor():void { return }

// Iterative Fibonacci sequence calculation
fibIter(n:long):long {
    var a:long b:long a = 0L b = 1L

    if (n < 0L) {
        return -1L
    }
    if (n == 0L) {
        return a
    }

    var sum:long
    var i:long i = 0L while i < n - 1L {
        sum = a + b
        a = b
        b = sum

        i = i + 1L
    }

    return b
}

// Recursive Fibonacci sequence calculation
fibRec1(a:long b:long n:long):long {
    TestUtils->printlnLong(b)
    if (n == 0L) {
        return b
    } else {
        return fibRec1(b a+b n-1L)
    }
}

fibRec(n:long):long {
    if (n < 0L) {
        return -1L
    }
    if (n == 0L) {
        return 0L
    }
    return fibRec1(0L 1L n-1L)
}

// Naive implementation of bubble sort
bubbleSort(list:List comp:Comparator):void {
    var tmp:Object
    var i:int i = 0 while i < list->size() {
        var j:int j = 0 while j < list->size() - 1 {
            if comp->compare(list->get(j) list->get(j+1)) < 0 {
                tmp = list->get(j)
                list->set(j list->get(j+1))
                list->set(j+1 tmp)
            }
            j = j + 1
        }
        i = i + 1
    }
    return
}
