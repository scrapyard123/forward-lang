// SPDX-License-Identifier: MIT

// This is an introduction to Forward syntax.
// In general, the language tries to avoid extra punctuation.

// You can import other classes/interfaces/annotations.
import {
    java.lang.AutoCloseable
    java.lang.Cloneable
    java.lang.Deprecated
    java.lang.Object

    java.io.PrintStream
}

// Each file contains exactly one class definition.
class forward.basic.ClassSyntax
    // Base class is added with " <: ClassName".
    <: Object
    // Interfaces are listed after a colon (no commas needed).
    : AutoCloseable Cloneable
    // Annotations are written in square bracket blocks.
    [Deprecated]

// Fields can be defined as follows.
f1:int

// Constructors are methods named "constructor", they are not generated by
// default. Return statement should always be explicit, otherwise an
// exception will be thrown at runtime.
constructor():void {
    return
}

// Parameters are not separated by commas. Methods may be annotated as well.
testMethod(a:int):int [Deprecated] {
    // You can call methods as following. If you haven't imported a class,
    // you can refer to it with a fully-qualified identifier.
    java.lang.System->out->println("Hello, World!")

    // Variable scope is the whole method. Declaration always requires type.
    // Supported primitive types are int, long, float and double.
    var var1:int unused:double
    var1 = a - 1

    // Booleans are represented with integers 0 and 1.
    var e:int = (10 > 5) + (10L < 5L)

    if -4.5F > -8F {
        e = e + 1
    } else {
        e = e - 1
    }

    // Language only supports while loop with (optional) "then" block
    // which is always executed at the end of the iteration.
    var sum:int = 0
    var i:int = 0 while i < 8 {
        if (i == 2) {
            continue
        }
        sum = sum + i
    } then {
        i = i + 1
    }

    // Return statement supports expressions
    return var1 + 2 * (var1 - 1) + e + sum
}

// Methods without code block are abstract.
abstractMethod():void

// Calling abstract methods (including methods in interface) that has not been
// implemented leads to exception.
// close():void { return } -> java.lang.AbstractMethodError

// Fields and methods can be static.
static f2:long
static staticTestMethod():PrintStream {
    return java.lang.System->err
}

// Continue with DemoInterface.fw
