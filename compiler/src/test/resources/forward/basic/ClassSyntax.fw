// SPDX-License-Identifier: MIT

// This is an introduction to Forward syntax.
// In general, the language tries to avoid extra punctuation.

// You can import other classes/interfaces/annotations.
import {
    java.lang.AutoCloseable
    java.lang.Cloneable
    java.lang.Deprecated
    java.lang.Object

    java.io.PrintStream
}

// Each file contains exactly one class definition.
class forward.basic.ClassSyntax
    // Base class is added with " <: ClassName".
    <: Object
    // Interfaces are listed after a colon (no commas needed).
    : AutoCloseable Cloneable
    // Annotations are written in square bracket blocks.
    [Deprecated]

// Fields are defined as follows. They can be annotated as well.
// Annotations may have parameters.
f1:int [Deprecated[since="17"]]

// Constructors are methods named "constructor", they are not generated by default.
constructor():void { }

// Methods are defined as follows.
testMethod(
    // Parameters can be annotated.
    a:int [Deprecated]
    // Parameters are not separated by comma.
    b:int
):int [
    // Methods themselves can be annotated. If there are lots of annotations,
    // annotation block can be formatted like a code block.
    Deprecated
] {
    // You can call methods as follows. If you haven't imported a class,
    // you can refer to it with a fully-qualified identifier.
    java.lang.System->out->println("Hello, World!")

    // Variable scope is the whole method. Declaration always requires type.
    // Supported primitive types are int, long, float and double.
    var var1:int unused:double
    var1 = a - 1

    // Booleans are represented with integers 0 and 1.
    var e:int = (10 > 5) + (10L < 5L)

    if -4.5F > -8F {
        e = e + 1
    } else {
        e = e - 1
    }

    // Language only supports while loop with (optional) "then" block
    // which is always executed at the end of the iteration.
    var sum:int = 0
    var i:int = 0 while i < 8 {
        if (i == 2) {
            continue
        }
        sum = sum + i
    } then {
        i = i + 1
    }

    // Return statement supports expressions.
    return var1 + 2 * (var1 - 1) + e + sum

    // If method is expected to return something and execution
    // falls through the end, an exception will be thrown at runtime.
}

// Methods without code block are abstract.
abstractMethod():void

// Calling abstract methods (including methods in interface) that has not been
// implemented leads to java.lang.AbstractMethodError exception.
// close():void { }

// Fields and methods can be static.
static f2:long
static staticTestMethod():PrintStream {
    return java.lang.System->err
}

// Continue with DemoInterface.fw
